#
# bc functions used by the raytracer script
#
# trace.sh - A simple raytracer implemented as a bash script
# Copyright (C) 2009 Mattias Nissler <mattias.nissler@gmx.de>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If
# not, see <http://www.gnu.org/licenses/>.
#

# print a vector
define void pv(a[]) {
	print a[0], ",", a[1], ",", a[2], "\n"
}

# euclidean vector norm
define s_len(x, y, z) {
	return sqrt(x * x + y * y + z * z)
}

# sqared vector norm
define s_len2(x, y, z) {
	return x * x + y * y + z * z
}

# inner vector product
define s_innerprod(x1, y1, z1, x2, y2, z2) {
	return x1 * x2 + y1 * y2 + z1 * z2
}

# scale a vector
define void v_scale(factor, x, y, z) {
	a[0] = factor * x
	a[1] = factor * y
	a[2] = factor * z
	pv(a[])
}

# subtract a vector from another vector
define void v_diff(x1, y1, z1, x2, y2, z2) {
	a[0] = x1 - x2
	a[1] = y1 - y2
	a[2] = z1 - z2
	pv(a[])
}

# convex combination of three vectors
define void v_comb( \
	f1, f2, f3, \
	p1x, p1y, p1z, \
	p2x, p2y, p2z, \
	p3x, p3y, p3z) {

	a[0] = f1 * p1x + f2 * p2x + f3 * p3x;
	a[1] = f1 * p1y + f2 * p2y + f3 * p3y;
	a[2] = f1 * p1z + f2 * p2z + f3 * p3z;

	pv(a[])
}

# component-wise product
define void v_compprod(p1x, p1y, p1z, p2x, p2y, p2z) {

	a[0] = p1x * p2x;
	a[1] = p1y * p2y;
	a[2] = p1z * p2z;

	pv(a[])
}

# outer product
define void outer_product(ax, ay, az, bx, by, bz, *c[]) {

	c[0] = ay * bz - az * by
	c[1] = az * bx - ax * bz
	c[2] = ax * by - ay * bx
}

# outer product
define void v_outerprod(ax, ay, az, bx, by, bz) {

	outer_product(ax, ay, az, nx, by, bz, c[])

	pv(c[])
}

# This calculates the intersection point between a given ray and triangle.
define void intersect( \
	ex, ey, ez, \
	tx, ty, tz, \
	p1x, p1y, p1z, \
	n1x, n1y, n1z, \
	c1r, c1g, c1b, \
	p2x, p2y, p2z, \
	n2x, n2y, n2z, \
	c2r, c2g, c2b, \
	p3x, p3y, p3z, \
	n3x, n3y, n3z, \
	c3r, c3g, c3b) {

	# compute direction vector
	dx = tx - ex
	dy = ty - ey
	dz = tz - ez

	# compute normal of the triangle plane
	outer_product(p2x - p1x, p2y - p1y, p2z - p1z, p3x - p1x, p3y - p1y, p3z - p1z, n[])
	as = s_len2(n[0], n[1], n[2])

	# calculate parameter value t
	denom = s_innerprod(dx, dy, dz, n[0], n[1], n[2])
	if (denom == 0) {
		# parallel ray
		print "miss\n"
		return
	}

	t = s_innerprod(p1x - ex, p1y - ey, p1z - ez, n[0], n[1], n[2]) / denom
	if (t <= 0) {
		print "miss\n"
		return
	}

	# intersection point with the plane
	pi[0] = ex + t * dx
	pi[1] = ey + t * dy
	pi[2] = ez + t * dz

	# compute barycentric coordinates
	outer_product(p1x-pi[0], p1y-pi[1], p1z-pi[2], p2x-pi[0], p2y-pi[1], p2z-pi[2], b3p[])
	b3 = sqrt(s_len2(b3p[0], b3p[1], b3p[2]) / as)
	outer_product(p2x-pi[0], p2y-pi[1], p2z-pi[2], p3x-pi[0], p3y-pi[1], p3z-pi[2], b1p[])
	b1 = sqrt(s_len2(b1p[0], b1p[1], b1p[2]) / as)
	outer_product(p3x-pi[0], p3y-pi[1], p3z-pi[2], p1x-pi[0], p1y-pi[1], p1z-pi[2], b2p[])
	b2 = sqrt(s_len2(b2p[0], b2p[1], b2p[2]) / as)

	# check the coordinates to see whether the intersection point is within the triangle
	sum = b1 + b2 + b3
	if (sum < 0 || sum > 1) {
		print "miss\n"
		return
	}

	# compute the surface normal (make sure the orientation is correct!)
	nsx = b1 * n1x + b2 * n2x + b3 * n3x
	nsy = b1 * n1y + b2 * n2y + b3 * n3y
	nsz = b1 * n1z + b2 * n2z + b3 * n3z
	if (s_innerprod(nsx, nsy, nsz, dx, dy, dz) > 0) {
		nsx = -nsx
		nsy = -nsy
		nsz = -nsz
	}

	# compute the color
	cr = b1 * c1r + b2 * c2r + b3 * c3r
	cg = b1 * c1g + b2 * c2g + b3 * c3g
	cb = b1 * c1b + b2 * c2b + b3 * c3b

	# we have a hit.
	print "hit ", t, " ", pi[0], ",", pi[1], ",", pi[2], " ", b1, ",", b2, ",", b3, \
		" ", nsx, ",", nsy, ",", nsz, " ", cr, ",", cg, ",", cb, "\n"
}

# Transform pixel coordinates into scene coordinates
define void pix_pos( \
	ox, oy, oz, \
	hx, hy, hz, \
	vx, vy, vz, \
	xpix, ypix) {

	d[0] = ox + xpix * hx + ypix * vx
	d[1] = oy + xpix * hy + ypix * vy
	d[2] = oz + xpix * hz + ypix * vz

	pv(d[])
}

# Compute diffuse and specular color component for a single light
define void lighting( \
	cbr, cbg, cbb, \
	clr, clg, clb, \
	cmr, cmg, cmb, \
	pix, piy, piz, \
	lx, ly, lz, \
	nx, ny, nz, \
	ex, ey, ez) {

	ix = lx - pix
	iy = ly - piy
	iz = lz - piz

	nlen = s_len(nx, ny, nz)
	ilen = s_len(ix, iy, iz)

	# diffuse component
	inl = s_innerprod(ix, iy, iz, nx, ny, nz)
	fd = inl / (nlen * ilen)
	if (fd < 0) {
		# Light is on wrong side of surface. Skip.
		print cbr, ",", cbg, ",", cbb, "\n"
		return
	}

	# specular component
	nf = 2 * inl
	rx = pix + ix + nf * nx
	ry = piy + iy + nf * ny
	rz = piz + iz + nf * nz
	eix = ex - pix;
	eiy = ey - piy;
	eiz = ez - piz;
	fs = s_innerprod(eix, eiy, eiz, rx, ry, rz) / (s_len(rx, rx, rz) * s_len(eix, eiy, eiz))
	for (i = 0; i < 4; i++) {
		fs = fs * fs
	}
	fs = 0

	# add the colors
	c[0] = cbr + clr * cmr * fd + clr * fs
	c[1] = cbg + clg * cmg * fd + clg * fs
	c[2] = cbb + clb * cmb * fd + clb * fs

	# clamp color values
	for (i = 0; i < 3; i++) {
		if (c[i] > 1) {
			c[i] = 1
		} else if (c[i] <= 0) {
			c[i] = 0
		}
	}

	pv(c[])
}

# compute a default normal if the given normal is zero
define void fix_normal( \
	nx, ny, nz, \
	p1x, p1y, p1z, \
	p2x, p2y, p2z, \
	p3x, p3y, p3z) {

	if (nx != 0 || ny != 0 || nz != 0) {
		a[0] = nx
		a[1] = ny
		a[2] = nz
	} else {
		outer_product(p1x-p2x, p1y-p2y, p1z-p2z, p3x-p2x, p3y-p2y, p3z-p2z, a[])
	}

	pv(a[])
}

